// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  email   String    @unique
  Expense Expense[]
  Income  Income[]
  Budget  Budget[]
}

model Budget {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  amount  Float
  userId  String    @db.ObjectId
  Expense Expense[]
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // TODO : category can be added later
}

model Income {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  amount Float
  userId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // TODO : source can be added alter
}

model Expense {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  budgetId String @db.ObjectId
  userId   String @db.ObjectId
  name     String
  amount   Float

  budget Budget @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
